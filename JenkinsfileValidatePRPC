@Library("ve-lib@test/apps/branchlib")
@Library("apps-lib@master") _

env.baseVersion = "PegaCRM"
env.ARTIFACTORY_URL = "https://internal.bin.pega.io/artifactory"
env.GIT_REPO_URL = "https://git.pega.io/scm/crm/crm-all.git"
env.PRPC_VAL_REPO = "builds-prpc-val-local"
env.PRPC_BUILD_NAME = "prpc-platform/master"
env.crmVersion = ""
env.tarballVersion = "8-${env.BUILD_NUMBER}"

def options = "JAVA_OPTS='-Xmx1024M -XX:MaxPermSize=512M -XX:ReservedCodeCacheSize=512M'"

node('CRM-image-jdk8') {

    def pipelineException
    def stackId = env.baseVersion + "-" + env.BUILD_NUMBER + "-" + "PCD-smoke"
    def desc = ""
    try {
        echo '------------------ Start of Code Checkout ------------------'
        checkout scm
        withCredentials([usernamePassword(credentialsId: 'artifactory2', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USER')]) {
            withCredentials([usernamePassword(credentialsId: 'readonlycreds-artifactory', passwordVariable: 'READONLY_ARTIFACTORY_PASSWORD', usernameVariable: 'READONLY_ARTIFACTORY_USER')]) {
                writeFile file: "/root/.gradle/gradle.properties",
                        text: "artifactoryUser=${ARTIFACTORY_USER}\n" +
                                "artifactoryPassword=${ARTIFACTORY_PASSWORD}\n" +
                                "artifactoryURL=${ARTIFACTORY_URL}\n" +
                                "readonlyArtifactoryUser=${READONLY_ARTIFACTORY_USER}\n" +
                                "readonlyArtifactoryPassword=${READONLY_ARTIFACTORY_PASSWORD}\n" +
                                "dockerRegistryUrl=https://docker-dev-local.bin.pega.io"
            }
        }

        def props = readProperties file: 'gradle.properties'
        def CRM_BUILD_BASE_VERSION = props['CRM_BUILD_BASE_VERSION']
        def CRM_BUILD_GROUP_ID = props['CRM_BUILD_GROUP_ID']
        def PRPC_BUILD_NAME = props['PRPC_BUILD_NAME']
        def PRPC_BUILD_BASE_VERSION = props['PRPC_BUILD_BASE_VERSION']

        env.CRM_BUILD_ARTIFACT_ID = props['CRM_BUILD_ARTIFACT_ID']

        env.prpcVersion = this.PRPC_version

        if (prpcVersion && prpcVersion.trim()) {
            desc += " PRPC Version: ${prpcVersion}"
            currentBuild.description = "${desc}"
        }

        //Query for latest validated build of CRM
        sh "chmod a+x ./gradlew && ./gradlew clean -b gradle/upgrade.gradle buildProps -PgroupId=com.pega.crm.docker -PartifactId=prpc-data-PegaCRM-postgres-9.4-ss-st -Pversion=${CRM_BUILD_BASE_VERSION}-+ -PartifactExt=tgz -PartifactName=prpc-data-PegaCRM-postgres-9.4-ss-st -PartifactoryRepo=apps-release-local -PartifactoryURL=${env.ARTIFACTORY_URL}"
        def crmBuildProps = readProperties file: "gradle/build/build.properties"
        env.crmVersion = crmBuildProps['build.version']

        if (crmVersion && crmVersion.trim()) {
            desc += " CRM Version: ${crmVersion}"
            currentBuild.description = "${desc}"
        }

        stage('Publish Tarball') {
            env.GRADLE_OPTS = "-Duser.timezone=America/New_York"
            echo '--------------- Import RAPs and publish tarball -----------------'
            def uniqueID = UUID.randomUUID().toString()
            try {
                env.JAVA_OPTS = "-Xmx1024M -XX:MaxPermSize=512M -XX:ReservedCodeCacheSize=512M"

                //start database with determined prpcVersion
                sh "chmod +x gradlew && ./gradlew startDatabase -PjobKey=${uniqueID} -PdbPort -PtarballVersion=${env.prpcVersion} -PrepositoryName=builds-prpc-val-local --stacktrace"
                //TODO correct this
                def productRAPListToImport = "${CRM_BUILD_GROUP_ID}:PegaCRM:${env.crmVersion},${CRM_BUILD_GROUP_ID}:PegaCRMSample_DDL:${env.crmVersion},${CRM_BUILD_GROUP_ID}:PegaCRMSample_DML:${env.crmVersion},${CRM_BUILD_GROUP_ID}:KMSampleData:${env.crmVersion}"
                //def productRAPListToImport = "${CRM_BUILD_GROUP_ID}:PegaCRM_74:${env.crmVersion},${CRM_BUILD_GROUP_ID}:PegaCRMSample_DDL:${env.crmVersion},${CRM_BUILD_GROUP_ID}:PegaCRMSample_DML:${env.crmVersion},${CRM_BUILD_GROUP_ID}:KMSampleData:${env.crmVersion},com.pega.product:PackageCRMPegaUnits_01.01:ExportWizard@zip"
                //imports RAPs and publishes tarball with specified GAV coordinates
                //TODO: change pega units to true
                sh "export ${options} && ./gradlew artifactoryPublish -PpublishTarball=true -PimportPegaUnits=false -PjobKey=${uniqueID} -PappServerId=${uniqueID} -PproductRAPList=${productRAPListToImport} " +
                        " -PtomcatImageTag=latest -PgroupId=com.pega.test.docker -PartifactId=prpc-data-PegaCRM-postgres-9.4-ss-st -Pversion=${env.tarballVersion} -Puploadrepokey=apps-dev-local"

            } catch (Exception e) {
                if (this.RAP_LIST) {
                    try {
                        echo "app server logs"
                        sh "docker logs ${uniqueID}-appServer"
                    } catch (Exception ex) {
                        echo "exception in getting tomcat logs ${ex.toString()}. Ignoring"
                    }
                }
                throw e
            } finally {
                sh "chmod +x gradlew && ./gradlew teardownDatabase teardownAppServer -PjobKey=${uniqueID} -PappServerId=${uniqueID} -PdbPort --continue --stacktrace"
                //Prune older docker images
                sh "./gradlew deleteArtifact -Pversion=8 -Prepo=apps-dev-local -PpruneMinBuildsToKeep=2 -PpruneMaxDaysToKeep=3 -PpathPrefix=com/pega/test/docker/prpc-data-PegaCRM-postgres-9.4-ss-st --stacktrace"
            }
        }

        def sutProps
        stage('SUT Launch') {
            sutProps = prepareSUT {
                credentialsId = 'sut-deployer'
                stackName = stackId
                launchELB = false

                //productRAPList = "${CRM_BUILD_GROUP_ID}:PegaCRM_75:${this.env.crmVersion},${CRM_BUILD_GROUP_ID}:PegaCRMSample_DDL:${this.env.crmVersion},${CRM_BUILD_GROUP_ID}:PegaCRMSample_DML:${this.env.crmVersion},${CRM_BUILD_GROUP_ID}:KMSampleData:${this.env.crmVersion}"

                tarballRepo = 'apps-dev-local'
                tarballGroupId = 'com.pega.test.docker'
                tarballArtifactId = 'prpc-data-PegaCRM-postgres-9.4-ss-st'
                tarballVersion = "${this.env.tarballVersion}"
            }
        }

        stage('Smoke Validation') {
            echo '------------- Run cucumber tests: Smoke Validation----------------'
            validate {
                type = "LUS"
                profile = "ReadyToShareNoPegaUnits.groovy"
                buildVersion = "${this.env.prpcVersion}"
                profilesDir = this.pwd() + "/pipeline/profiles"
                sutURL = sutProps['sutURL']
                stackName = "${stackId}"
                pipelineImageName = "CRM-image"
                cucumberProjectName = "cucumber-webdriver"
                repoURL = "$GIT_REPO_URL"
                cucumberReportTitle = "Cucumber Test Results - Smoke"
                cucumberImage = 'ui-image-cucumber-aws'
                artifactoryCredentials = 'artifactory2'
            }
        }

        if (currentBuild.result != "UNSTABLE" && currentBuild.result != 'FAILURE') {
            stage('Promote Build') {
                //Query for fetching the PRPC build version
                sh "chmod a+x gradlew && sleep 2 && ./gradlew clean -b gradle/upgrade.gradle buildProps -PgroupId=com.pega.prpc.docker -PartifactId=prpc-data-coreAssembly-postgres-9.4-ss-st -Pversion=${this.PRPC_VERSION} -PartifactExt=tgz -PartifactName=prpc-data-coreAssembly-postgres-9.4-ss-st -PartifactoryRepo=apps-dev-local -PartifactoryURL=${env.ARTIFACTORY_URL}"
                buildProps = readProperties file: "gradle/build/build.properties"
                def tempPrpcVersion = buildProps['build.version']

                if (!tempPrpcVersion.equals(env.prpcVersion)) {
                    sh "./gradlew --no-daemon copyArtifact -Pversion=${this.env.prpcVersion} -Prepo=builds-prpc-val-local  -PbuildName=${PRPC_BUILD_NAME} -PtargetRepo=apps-dev-local -PhasBuildName=false --stacktrace"
                } else {
                    sh "./gradlew --no-daemon setValidated -Pversion=${this.env.prpcVersion} -PbuildName=${PRPC_BUILD_NAME} --stacktrace"
                }
                //Prune older repos
                sh "./gradlew deleteArtifact -Pversion=${PRPC_BUILD_BASE_VERSION} -PpruneMinBuildsToKeep=2 -PpruneMaxDaysToKeep=15 -PappName=${PRPC_BUILD_NAME} -PpathPrefix=com/pega/prpc/docker/prpc-data-coreAssembly-postgres-9.4-ss-st --stacktrace"
            }
        }
    } catch (def e) {
        pipelineException = e
        currentBuild.result = "FAILURE"
        throw e
    } finally {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'sut-deployer', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
            sh "chmod a+x gradlew && sleep 2 && ./gradlew --no-daemon  down -PstackName=${stackId}-db,${stackId}-app,${stackId}-elb --stacktrace"
        }
        def prTemplate = readFile(encoding: 'UTF-8', file: "pipeline/templates/BuildMailTemplate")
        mailNotifier {
            template = "${prTemplate}"
            subject = "[Pipeline] Platform-cd-to-crm-dev > PRPC Build #${this.env.prpcVersion} CRM Build #${this.env.crmVersion} ${this.currentBuild.result}!"
            recipient = this.env.PLATFORM_DAILY_BUILD_VALIDATION_MAIL_GROUP
            exception = pipelineException
            trigger = "AlwaysTrigger"
        }

    }
}
