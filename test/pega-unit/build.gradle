apply plugin: 'distribution'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'org.tenne.rest'

buildscript() {
    repositories {
        mavenLocal()
        maven {
            url "${artifactoryURL}/repo2"
            credentials {
                username = artifactoryUser
                password = artifactoryPassword
            }
        }
    }
    dependencies {
        classpath group: 'org._10ne.gradle', name: 'rest-gradle-plugin', version: '0.4.2'
    }
}

distributions {
    main {
        baseName = 'pega-unit'
        contents {
            into('/') {
                from { '.' }
                from { "${rootDir}/gradlew" }
                from { "${rootDir}/gradlew.bat" }
                exclude 'build'
            }
            into('/gradle/wrapper') {
                from { "${rootDir}/gradle/wrapper" }
            }
        }
    }
}

repositories {
    mavenLocal()
    maven {
        url "${artifactoryURL}/repo2"
        credentials {
            username = artifactoryUser
            password = artifactoryPassword
        }
    }
}

artifacts { archives distZip }
distTar.enabled = false

publishing {
    publications {
        prpcEngine(MavenPublication) { artifact distZip {} }
    }
}

def preparePRPCRestCallURL(def targetURL, def accessGroup, def testSuite) {
    def prpcURL = targetURL
    if (accessGroup)
        prpcURL += "?AccessGroup=${java.net.URLEncoder.encode(accessGroup, 'UTF-8')}"
    if (testSuite)
        prpcURL += (accessGroup ? '&' : '?') + "TestSuiteID=${java.net.URLEncoder.encode(testSuite, 'UTF-8')}"
    return prpcURL
}

def createTestResultFiles(def iteration, def testResultsFolder) {
    File testResultsFile = new File("${testResultsFolder}/testResults-${iteration}.xml")
    if (!testResultsFile.exists())
        testResultsFile.createNewFile()
    return testResultsFile
}

def assertInputs() {
    def inputsList = ['targetURL', 'pegaUsername', 'pegaPassword', 'accessGroup']
    inputsList.each { it ->
        if (!project.findProperty(it)) {
            throw new InvalidUserDataException("Must supply -P${input} with appropriate value")
        }
    }
}

def createTasksForEachSuite(def url, def user, def pwd, def accessGroup, def testSuite, def testResultsDir) {
    if (!testSuite) {
        testSuite = ""
    }
    def testSuitesArray = testSuite.split(',')
    for (int i = 0; i < testSuitesArray.length; i++) {
        def suite = testSuite?.trim() ? testSuite : null
        def restPRPCURL = preparePRPCRestCallURL(url, accessGroup, suite)
        def resultsFile = createTestResultFiles(i, testResultsDir)
        project.task("pega-unit-task-${i}", type: org._10ne.gradle.rest.RestTask) {
            uri = restPRPCURL
            username = user
            password = pwd
            httpMethod = 'post'
            contentType = groovyx.net.http.ContentType.XML
            preemptiveAuth = true
            doFirst {
                println "targetURL is : ${restPRPCURL}"
                responseHandler = { response ->
                    println "response: ${response}"
                    def parsedResponse = groovy.xml.XmlUtil.serialize(response)
                    resultsFile.write "${parsedResponse.toString()}"
                }
            }
            project.tasks.getByName('runpegaunit').dependsOn("pega-unit-task-${i}")
        }
    }
}

task runpegaunit {
    doFirst {
        assertInputs()
    }
    def targetURL = findProperty('targetURL')
    def operatorID = findProperty('pegaUsername')
    def password = findProperty('pegaPassword')
    def accessGroup = findProperty('accessGroup')
    def testSuite = findProperty('testSuite')
    def serviceActivityRelativePath = findProperty('serviceActivityRelativePath')

    File testResultsFolder = new File("${buildDir}/test/results")
    if (testResultsFolder.exists()) {
        testResultsFolder.deleteDir()
    }
    testResultsFolder.mkdirs()

    def testURL = "${targetURL}/${serviceActivityRelativePath}"

    createTasksForEachSuite(testURL, operatorID, password, accessGroup, testSuite, testResultsFolder)

}