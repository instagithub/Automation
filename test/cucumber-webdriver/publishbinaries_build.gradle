buildscript {
	repositories {
		   mavenLocal()
        maven {
            url "http://meshbinhyd.pega.com/artifactory/repo2"
        }
	}

	dependencies {
		classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1'
	}
}

repositories {
		mavenLocal()
		maven { url = "https://meshbinhyd.pega.com/artifactory/repo2" }

		// Note: Please get new dependencies into artifactory before
		// checking into trunk any code that needs them.
	}

configurations {
    binary
}


ext {
    binaries = []

    binaryGroupId = "com.pega.apps.crm.resources"

    includeBinaries = { config ->
        binaries.each { k, v ->
            def expanded
            int i = k.indexOf(':')
            if (i > 0) {
                artifactId = k.substring(0, i)
                versionId = k.substring(i + 1)
                expanded = "$binaryGroupId:$artifactId:$versionId"
            }
            project.dependencies.add(config, expanded.toString())
        }
    }
}

apply from: "binaryVersions.gradle"

apply plugin: 'distribution'
apply plugin: 'maven-publish'
apply plugin: org.jfrog.gradle.plugin.artifactory.ArtifactoryPublicationsPlugin
apply plugin: org.jfrog.gradle.plugin.artifactory.ArtifactoryConfigurationsPlugin

dependencies {
    // include binaries
    includeBinaries('binary')
}


task loadBinaries()  {
	outputs.upToDateWhen { false }
	doLast {
	    configurations.binary.getResolvedConfiguration().getResolvedArtifacts().findAll { dep ->
	
	        def modVer = dep.getModuleVersion().getId()
	        //println modVer
	        def depGAV = modVer.getName() + ":" + modVer.getVersion()
	        //println depGAV
	        def depFile = dep.getFile()
	        def destParent = binaries[depGAV]
	        //println depFile
	        //println destParent
	        copy {
	            from zipTree(depFile)
	            into destParent
	        }
	    }
	}
}

task listBinaries {
	doFirst{
		delete "$binary_output_dir", "$binary_zip_name"
	}
	doLast {
		String binariesText = new File("$projectDir" + File.separator + "binaries.txt").text
		def binariesList = binariesText.split('\n')
		println "searching for binaries in the following location:$projectDir"
		def list = fileTree("$projectDir").exclude { currentFile ->
			currentFile.file.canonicalPath.contains("target" + File.separator) || currentFile.file.canonicalPath.contains("build" + File.separator)
		}

		list.each { file ->
			binariesList.each { binary ->
				println binary.replace("*","").trim()
				if((file.name.endsWith(binary.replace("*","").trim())) || (file.name.contains("chromedriver"))){
					println  file.absolutePath
					copy {
						from "$file.absolutePath"
						into "$file.absolutePath".replace("$projectDir","$projectDir"+ File.separator+"$binary_output_dir").replace(file.name,"")
					}
					delete file.absolutePath
				} else {
					println "not a binary" + file.absolutePath
				}
			}
		}
	}
}

task zipBinaries(type:Zip,dependsOn: listBinaries) {
  from "$binary_output_dir"
  archiveName "$binary_zip_name"
  doLast{
	delete "$binary_output_dir"
  }
}

artifacts {
    archives zipBinaries
}

publishing{
	publications {
		mavenZip(MavenPublication) {
			groupId "$binaries_groupId"
			artifactId project.artifactId
			version versionId
			artifact zipBinaries{
				extension "zip"
			}
		}
	}
}

artifactory {
	publish {
		contextUrl = "$artifactoryURL"   //The base Artifactory URL for the publisher
		repository {
			repoKey = "$repo_key"
			username = "$artifactory_user"
			password = "$artifactory_password"
		}
		defaults {
           publications ('mavenZip')
        }
	}
	
	clientConfig.setIncludeEnvVars(true)
}