<font face="calibri">
    <%
        def pipelineInstance = PipelineInstance
        def classMap = ClassMap

        def jobName = pipelineInstance.env.JOB_NAME
        def sourceBranchName = pipelineInstance.env.SOURCE_BRANCH_NAME
        def branchName = pipelineInstance.env.BRANCH_NAME
        def branchList = pipelineInstance.env.BRANCH_LIST
        def mergeID = pipelineInstance.env.MERGE_ID
        def buildNumber = pipelineInstance.env.BUILD_NUMBER
        def build = pipelineInstance.manager.hudson.getInstance().getItemByFullName(jobName).getBuild(buildNumber)
        def buildProperties = build.getProperties()
        def buildURL = URLDecoder.decode(build.getAbsoluteUrl(), "UTF-8")
        def buildActions = build.getActions()
        def elkLink = buildActions.find{it?.getDisplayName()?.contains("ELK")}
        def blueOceanURL = buildURL.replaceFirst('job', "blue/organizations/jenkins/${jobName}/detail") + 'pipeline'
        def branchInfoJson = pipelineInstance.env.branchInfoJson
        def pr = pipelineInstance.env.PR_URL
        sourceBranchName = URLDecoder.decode("${sourceBranchName}","UTF-8")
        branchName = URLDecoder.decode("${branchName}","UTF-8")
        elkLink  = elkLink ? "${buildURL}ELK_Links/" : "Build Failed Before ELK Link Generation"
        def exceptionMessage = pipelineInstance.env.exceptionMessage

    %>
        <h1 align="center">Merge Request</h1>
        <h3 align='left'>Build Summary</h3>
             Job Name: ${jobName}
        </br>PRPC Branch(s): ${branchList}
        </br>PRPC Merge ID: ${mergeID}
        </br>GIT Source Branch Name : ${sourceBranchName}
        </br>GIT Target Branch Name: ${branchName}
        </br>Profile Name: ${classMap.Profile}
        </br>Build Duration: ${buildProperties.get("durationString")}
        </br>Build Start Time: ${buildProperties.get("time")}
        </br>
        </br>Classic View: ${buildURL}
        </br>Blue Ocean View: ${blueOceanURL}
        </br>ELK Links: ${elkLink}
        </br>Flow Graph Table: ${buildURL}flowGraphTable
        </br></br>

        <h3 align='left'>Details on Merge Failure</h3>
    <%
        if(exceptionMessage) {
        %>
            </br>${exceptionMessage.replaceAll("\\n", "<br>")}
        <%
        }else{
            %>
                -----
            <%
        }
    %>

        <h3 align='left'>Post Build Summary</h3>
    <%
        def postBuildText = []
        def actionsCollection = buildProperties.get("actions")
        if(actionsCollection && actionsCollection.size() > 0){
            for(int i=0; i<actionsCollection.size(); i++){
                if(actionsCollection[i].getClass().getName() == "org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildSummaryAction"){
                    postBuildText.add(actionsCollection[i].getText())
                }
            }
        }
        if(postBuildText.size() > 0){
            for(int i=0;i<postBuildText.size();i++){
                %>
                    ${postBuildText[i]}<br>
                <%
            }
        }else{
            %>
                -----
            <%
        }
    %>
       <h3 align='left'>Rules Part of your Merge Request</h3>
       <%
       def output = ""

                    if(branchList && branchList?.trim()){
                    try {
                               def json = new groovy.json.JsonSlurper().parseText(branchInfoJson)

                               if (json.containsKey('branchInfo')) {
                               def branchMap = json.branchInfo
                                branchMap.each { key, value ->
                                                                   output = output + "\nBranch:${key}\n"
                                                                   def branchContentMap = value
                                                                   branchContentMap.each { rulesetKey, ruleList ->
                                                                       output = output + "\tRuleSet:${rulesetKey}\n"
                                                                       ruleList.each { rule ->
                                                                           output = output + "\t\t${rule}\n"
                                                                       }
                                                                   }
                                                               }
                               }

                           } catch (Exception e) {
                                output = "Some error ouccred while displaying rule info"
                           }
                     } else {
                        output = 'No PRPC Branches as part of merge'
                     }
               %>

        <p><pre>${output}</pre></p>
        <h3 align='left'>Code Changes</h3>
           <%
                   if(pr && pr?.trim()){ %>
                       <a href='${pr}'>Pull Request: ${pr}</a>
                   <%}else{
                     %>
                       -----
                     <%
                   }
               %>
</font>