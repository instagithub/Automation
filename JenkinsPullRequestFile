env.baseVersion = "PegaCRM"
env.ARTIFACTORY_URL = 'https://internal.bin.pega.io/artifactory'

@Library("ve-lib@test/apps/branchlib")
@Library("apps-lib@master") _
def params = [:]
params["prResultLinks"] = """
Cucumber Results can be found @ ${this.env.BUILD_URL}Cucumber_Test_Results_-_BUILD/
Output can be found @ ${this.env.RUN_DISPLAY_URL} """

params["prExceptionLinks"] = "Test results can be found @ ${this.env.BUILD_URL}\n" +
"Output can be found @ ${this.env.RUN_DISPLAY_URL}"

params["bitbucketCredentials"] = 'bitbucket-prpc'
params['buildServerURL'] = 'http://10.60.214.175:9080/'

env.LATEST_CRM_VERSION = ""
env.LATEST_PRPC_VERSION = ""

def profileName = "ReadyToShare.groovy"
def sutProps = [:]

withCredentials([usernamePassword(credentialsId: 'artifactory2', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USER')]) {
    withCredentials([usernamePassword(credentialsId: 'readonlycreds-artifactory', passwordVariable: 'READONLY_ARTIFACTORY_PASSWORD', usernameVariable: 'READONLY_ARTIFACTORY_USER')]) {

        node('CRM-image-jdk8') {
            def stackId = "${env.baseVersion}-${(env.JOB_NAME + '-' + env.BUILD_NUMBER).replaceAll('(/|%2F)', '-')}"
            try {
                
                echo '------------------ Start of Code Checkout ------------------'

                checkout scm

                def props = readProperties file: 'gradle.properties'
                def CRM_BUILD_BASE_VERSION = props['CRM_BUILD_BASE_VERSION']

                writeFile file: "/root/.gradle/gradle.properties",
                        text: "artifactoryUser=${ARTIFACTORY_USER}\n" +
                                "artifactoryPassword=${ARTIFACTORY_PASSWORD}\n" +
                                "artifactoryURL=${ARTIFACTORY_URL}\n" +
                                "readonlyArtifactoryUser=${READONLY_ARTIFACTORY_USER}\n" +
                                "readonlyArtifactoryPassword=${READONLY_ARTIFACTORY_PASSWORD}"

                //get latest validated CRM build
                sh "chmod a+x gradlew && sleep 2 && ./gradlew clean -b gradle/upgrade.gradle buildProps -PgroupId=com.pega.crm.docker -PartifactId=prpc-data-PegaCRM-postgres-9.4-ss-st -Pversion=${CRM_BUILD_BASE_VERSION}-+ -PartifactExt=tgz -PartifactName=prpc-data-PegaCRM-postgres-9.4-ss-st -PartifactoryRepo=apps-release-local -PartifactoryURL=${env.ARTIFACTORY_URL}"
                def crmBuildProps = readProperties file: "gradle/build/build.properties"
                env.LATEST_CRM_VERSION = crmBuildProps['build.version']
                env.LATEST_PRPC_VERSION = crmBuildProps['prpc.version']

                if (LATEST_PRPC_VERSION && LATEST_PRPC_VERSION.trim() && LATEST_CRM_VERSION && LATEST_CRM_VERSION.trim()) {
                    def desc = " PRPC Version: ${LATEST_PRPC_VERSION} CRM Version: ${LATEST_CRM_VERSION}"
                    currentBuild.description = currentBuild.description ? "${currentBuild.description} ${desc}" : "${desc}"
                }

                withPRFlow(params) {
                    stage('SUT Launch') {
                        sutProps = prepareSUT() {
                            credentialsId = 'sut-deployer'
                            stackName = stackId
                            launchELB = false

                            branchRAPList = "${this.env.RAP_LIST}"

                            tarballRepo = 'apps-release-local'
                            tarballGroupId = 'com.pega.crm.docker'
                            tarballArtifactId = 'prpc-data-PegaCRM-postgres-9.4-ss-st'
                            tarballVersion = "${this.env.LATEST_CRM_VERSION}"
                        }
                    }

                    stage('Ready To Share') {
                        validate {
                            type = "LUS"
                            profile = profileName
                            profilesDir = this.pwd() + "/pipeline/profiles"
                            sutURL = sutProps['sutURL']
                            stackName = "${stackId}"
                            pipelineImageName = "CRM-image"
                            cucumberProjectName = "cucumber-webdriver"
                            cucumberReportTitle = "Cucumber Test Results - PR"
                            cucumberImage = 'ui-image-cucumber-aws'
                            artifactoryCredentials = 'artifactory2'
                        }
                    }
                }

            } catch (Exception e) {
                currentBuild.result = 'FAILURE'
                throw e
            } finally {                
                if (currentBuild.result == 'UNSTABLE' || currentBuild.result == 'FAILURE') {
                    def sshKey = (env.ENV_TYPE == "prod") ? 'com/pega/pipeline/ssh/toolsAccount/ec2.pem' : 'com/pega/pipeline/ssh/researchAccount/ec2.pem'
                    def request = libraryResource sshKey

                    writeFile file: "ec2.pem", text: "${request}"
                    def ec2PEM = pwd() + "/ec2.pem"
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        try {
                            sh "./gradlew --no-daemon  push -PstackName=${sutProps['DB_STACK']} -Pip=${sutProps['PRIVATE_IP']} -PcontainersData='${sutProps['dbContainerData']}'  -PbucketName=${env.S3_BUCKET_NAME} -Ptest_type=ui -Pvid=${stackId} -PsshKeyPath=${ec2PEM}"
                            sh "./gradlew --no-daemon  push -PstackName=${sutProps['APP_STACK']} -Pip=${sutProps['PRIVATE_IP']} -PcontainersData='${sutProps['appContainerData']}' -PbucketName=${env.S3_BUCKET_NAME} -Ptest_type=ui -Pvid=${stackId} -PsshKeyPath=${ec2PEM}"

                            //publish links
                            displayS3Artifacts(bucketName: "${env.S3_BUCKET_NAME}", awsCredentials: "${env.AWS_CREDENTIALS_ID}", region: "${env.AWS_DEFAULT_REGION}", s3FolderName: "${stackId}")
                        } catch (Exception exp) {
                            echo "Error ${exp.toString()} while pushing debug assets"
                        }

                    }
                } else {
                    try {
                        build job: 'CRM/crm-gated-merges/crm-ci-build', parameters: [string(name: 'SOURCE_BRANCH_NAME', value: 'master'), string(name: 'BRANCH_NAME', value: 'master'), string(name: 'SOURCE_COMMIT_HASH', value: 'NA'), string(name: 'MERGE_ID', value: ''), string(name: 'BRANCH_LIST', value: ''), string(name: 'RAP_LIST', value: ''), string(name: 'PR_URL', value: 'https://git.pega.io/projects/CRM/repos/crm-all/pull-requests/'), string(name: 'PR_PROJECT', value: 'CRM'), string(name: 'PR_REPO', value: 'crm-all'), string(name: 'PR_ID', value: ''), string(name: 'PR_TITLE', value: ''), string(name: 'RULESET_VERSION', value: '')], wait: false
                    } catch (Exception e) {
                        echo """failed to trigger ci-build job 
                                ERROR: ${e.toString()}"""
                    }
                }
                
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'sut-deployer', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh "chmod a+x gradlew && ./gradlew down -PstackName=${stackId}-db,${stackId}-app,${stackId}-elb"
                }

                if (currentBuild.result == null) {
                    currentBuild.result = 'SUCCESS'
                }               

                try {
                    if(env.BRANCH_LIST && env.BRANCH_LIST?.trim()) {
                        env.branchInfoJson = readFile(encoding: 'UTF-8', file: "build/branch-info.json")
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'build/branch-info.json'
                    }
                } catch (Exception exp) {
                    env.branchInfoJson = "Unable to fetch branch info json"
                    echo "Error while trying to read or archiving branch info json: ${exp.toString()}"
                }
                try {
                    def prTemplate = readFile(encoding: 'UTF-8', file: "pipeline/templates/PRMailTemplate")
                    mailNotifier {
                        template = "${prTemplate}"
                        subject = "[Pipeline] PegaCRM-ci-pipeline > Merge status > #${this.env.BUILD_NUMBER}  ${this.currentBuild.result}!"
                        recipient = this.env.Recipient + ',' + this.env.CRM_LAUNCH_MARKETING_MAIL_GROUP
                        classMap = [Profile: profileName]
                        trigger = "AlwaysTrigger"
                    }
                } catch (Exception e) {
                    echo """failed to notify 
                    ERROR: ${e.toString()}"""
                }
            }
        }
    }
}
