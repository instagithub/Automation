@Library("apps-pipeline-shared-lib@master") _

env.CHECK_VERSION_ARTIFACTORY_URL = "https://internal.bin.pega.io/artifactory"
env.ARTIFACTORY_URL = "https://meshbincam.pega.com/artifactory"

def nodeToUse = isDevRestart.toBoolean() ? 'CRMDev-ci' : 'blr_executor'
env.PRPC_VERSION = this.PRPC_VERSION
def buildStatus = ""

node(nodeToUse) {
    try {
        echo '------------------ Start of Code Checkout ------------------'
        checkout scm

        upgrade()

    } catch (Exception e) {
        buildStatus = "FAILURE"
        throw e
    } finally {
        if (buildStatus.equals("")) {
            buildStatus = "SUCCESS"
        }
        emailext body: "Build URL: ${env.BUILD_URL}", subject: "CRM-PCD: Dev server restart ${buildStatus}", to: this.env.EE_LAB_BUILD_MAIL_GROUP
    }
}

def upgrade () {

    upgradeAppPipelineFlow {
        parameters {

            createBugs = false
            deployPrweb= true

            appServerInfoFilePath = "${this.isDevRestart.toBoolean() ? "AppServerInfoDev.json" : "AppServerInfoClone.json"}"

            //gradle file details
            gradleFileToBuild = 'gradle/upgrade.gradle'
            gradleProjectDir = 'gradle'

            //dbInfo
            jdbcURL = "${this.isDevRestart.toBoolean() ? 'jdbc:oracle:thin:@10.225.69.174:1521:H3CRMDEV' : 'jdbc:oracle:thin:@10.150.68.156:1521:BCRMCICD'}"
            dbCredentialID = "${this.isDevRestart.toBoolean() ? 'CRM-dev-7.5' : 'CRM-Clone'}"
            rulesSchema = 'crmrules75'
            dataSchema = 'crmdata75'
        }
        stages {
            stageList = ['stopAllNodes', 'startAllNodes']
        }
    }
}